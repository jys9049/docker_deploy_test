events {}

http {
  include       mime.types;
  default_type  application/octet-stream;

  server {
    listen 80;
    server_name docker.jeongyongseong.kr;

    location / {
        return 301 https://$host$request_uri;
    }
  }

  server {
    listen 443 ssl;
    http2 on;
    server_name docker.jeongyongseong.kr;

    ssl_certificate /etc/letsencrypt/live/docker.jeongyongseong.kr/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/docker.jeongyongseong.kr/privkey.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

    # HSTS (Strict Transport Security) (선택 사항, HTTPS 강제 및 보안 강화)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    location /_next/static/ {
        alias /app/.next/static/;
        access_log off;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    location / {

        # 디버깅용 헤더 추가
        add_header X-Debug-Location "RootLocationBlockEntered" always;
        add_header X-Debug-Proxy-Target "http://web:3000" always;

      proxy_pass http://web:3000; 
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;

      proxy_cache_bypass $http_upgrade; #
    }
  }
}